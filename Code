#TIC TAC TOE GAME
board=["_","_","_",
       "_","_","_",
      "_","_","_"]

game_is_still_going=True;

winner=None

current_player="X"
#Display board
def display_board():
  print(board[0]+"|"+board[1]+"|"+board[2]   +"     1 | 2 | 3")
  print(board[3]+"|"+board[4]+"|"+board[5]   +"     4 | 5 | 6")
  print(board[6]+"|"+board[7]+"|"+board[8]   +"     7 | 8 | 9")

def play_game():


  #display the initial board
  display_board()

  while game_is_still_going:
    #handle a single turn of an arbitary player
    handle_turn(current_player)

    #check if the game has ended
    check_if_game_over()

    #flip to other player
    flip_player()

#The game has ended
  if winner=="X" or winner=="O" :
    print(winner + " won.")
  elif winner==None:
    print("Tie")
#___________________________________________________#


#handle a single turn of an arbitary player
def handle_turn(player):
  print(player+"'s turn")
  position=input("choose a number between 1-9 :::")

  valid=False
  while not valid:
    while position not in ["1","2","3","4","5","6","7","8","9"]:
      position=input("invalid input ! choose a number between 1-9 :::")
    position=int(position)-1

    if board[position]=="_":
      valid=True
    else:
      print("Warning ! You can't go there.")
    
  board[position]=player
  display_board()

def check_if_game_over():
  check_for_winner()
  check_if_tie()

def check_for_winner():
  global winner
  #check rows
  row_winner=check_rows()
  #check columns
  column_winner=check_columns()
  #check diagonals
  diagonal_winner=check_diagonals()

#get the winner
  if row_winner:
    winner=row_winner
  elif column_winner:
    winner=column_winner
  elif diagonal_winner:
    winner=diagonal_winner
  else:
    winner=None


def check_rows():
  global game_is_still_going
  #check if all any of the rows has the same value
  row_1 = board[0] == board[1] == board[2] != "_"
  row_2=board[3]==board[4]==board[5] !="_"
  row_3=board[6]==board[7]==board[8] !="_"

  if row_1 or row_2 or row_3:
    game_is_still_going=False

    #return the winner
  if row_1:
    return board[0]
  elif row_2:
    return board[3]
  elif row_3:
    return board[6]
  return

def check_columns():
  global game_is_still_going
  #check if all any of the columns has the same value
  column_1 = board[0] == board[3] == board[6]  != "_"
  column_2 = board[1]  == board[4] == board[7] != "_"
  column_3 = board[2]  == board[5] == board[8] != "_"

  if column_1 or column_2 or column_3:
    game_is_still_going=False

    #return the winner
  if column_1:
    return board[0]
  elif column_2:
    return board[1]
  elif column_3:
    return board[2]
  return
def check_diagonals():
  global game_is_still_going
  #check if all any of the diagonals has the same value
  diagonal_1 = board[0] == board[4] == board[8]  != "_"
  diagonal_2 = board[2]  == board[4] == board[6] != "_"
  

  if diagonal_1 or diagonal_2:
    game_is_still_going=False

    #return the winner
  if diagonal_1:
    return board[0]
  elif diagonal_2:
    return board[2]
  return
  
def check_if_tie():
  global game_is_still_going
  if "_" not in board:
    game_is_still_going=False
  return

def flip_player():
  global current_player
  #if current player is X change it to O
  if current_player=="X":
    current_player="O"
    #if the current player is O change it to X
  elif current_player=="O":
    current_player="X"
play_game()




#board
#display the board
#play game
   #take input from user
   #display the input
#handle the turn
#check Win
  #check rows
  #check columns
  #check diagonals
#check Tie
#flip player
